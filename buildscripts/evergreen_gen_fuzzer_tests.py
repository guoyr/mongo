#!/usr/bin/env python3
"""Generate fuzzer tests to run in evergreen in parallel."""
import os

import click
import inject
from evergreen import EvergreenApi, RetryingEvergreenApi

from buildscripts.task_generation.evg_config_builder import EvgConfigBuilder
from buildscripts.task_generation.evg_expansions import EvgExpansions, DEFAULT_CONFIG_DIRECTORY
from buildscripts.task_generation.gen_config import GenerationConfiguration
from buildscripts.task_generation.gen_task_service import GenTaskOptions, FuzzerGenTaskParams
from buildscripts.task_generation.gen_task_validation import GenTaskValidationService
from buildscripts.task_generation.generated_config import GeneratedConfiguration
from buildscripts.task_generation.resmoke_proxy import ResmokeProxyConfig
from buildscripts.task_generation.suite_split import SuiteSplitService
from buildscripts.util.cmdutils import enable_logging

GEN_PARENT_TASK = "generator_tasks"
GENERATE_CONFIG_FILE = "etc/generate_subtasks_config.yml"
DEFAULT_TEST_SUITE_DIR = os.path.join("buildscripts", "resmokeconfig", "suites")
EVG_CONFIG_FILE = "./.evergreen.yml"


class EvgGenFuzzerOrchestrator:
    """Orchestrate the generation of fuzzer tasks."""

    @inject.autoparams()
    def __init__(self, validation_service: GenTaskValidationService) -> None:
        """
        Initialize the orchestrator.

        :param validation_service: Validation Service for generating tasks.
        """
        self.validation_service = validation_service

    @staticmethod
    def generate_config(fuzzer_params: FuzzerGenTaskParams) -> GeneratedConfiguration:
        """
        Generate a fuzzer task based on the given parameters.

        :param fuzzer_params: Parameters describing how fuzzer should be generated.
        :return: Configuration to generate the specified fuzzer.
        """
        builder = EvgConfigBuilder()  # pylint: disable=no-value-for-parameter

        builder.generate_fuzzer(fuzzer_params)
        builder.add_display_task(GEN_PARENT_TASK, {f"{fuzzer_params.task_name}_gen"},
                                 fuzzer_params.variant)
        return builder.build(fuzzer_params.task_name + ".json")

    def generate_fuzzer(self, task_id: str, fuzzer_params: FuzzerGenTaskParams) -> None:
        """
        Save the configuration to generate the specified fuzzer to disk.

        :param task_id: ID of task doing the generation.
        :param fuzzer_params: Parameters describing how fuzzer should be generated.
        """
        if not self.validation_service.should_task_be_generated(task_id):
            print("Not generating configuration due to previous successful generation.")
            return

        generated_config = self.generate_config(fuzzer_params)
        generated_config.write_all_to_dir(DEFAULT_CONFIG_DIRECTORY)


@click.command()
@click.option("--expansion-file", type=str, required=True,
              help="Location of expansions file generated by evergreen.")
@click.option("--evergreen-config", type=str, default=EVG_CONFIG_FILE,
              help="Location of evergreen configuration file.")
@click.option("--verbose", is_flag=True, default=False, help="Enable verbose logging.")
def main(expansion_file: str, evergreen_config: str, verbose: bool) -> None:
    """Generate fuzzer tests to run in evergreen."""
    enable_logging(verbose)

    evg_expansions = EvgExpansions.from_yaml_file(expansion_file)

    def dependencies(binder: inject.Binder) -> None:
        binder.bind(SuiteSplitService, None)
        binder.bind(GenTaskOptions, evg_expansions.gen_task_options())
        binder.bind(EvergreenApi, RetryingEvergreenApi.get_api(config_file=evergreen_config))
        binder.bind(GenerationConfiguration,
                    GenerationConfiguration.from_yaml_file(GENERATE_CONFIG_FILE))
        binder.bind(ResmokeProxyConfig,
                    ResmokeProxyConfig(resmoke_suite_dir=DEFAULT_TEST_SUITE_DIR))

    inject.configure(dependencies)

    gen_fuzzer_orchestrator = EvgGenFuzzerOrchestrator()  # pylint: disable=no-value-for-parameter
    gen_fuzzer_orchestrator.generate_fuzzer(evg_expansions.task_id,
                                            evg_expansions.fuzzer_gen_task_params())


if __name__ == '__main__':
    main()  # pylint: disable=no-value-for-parameter
